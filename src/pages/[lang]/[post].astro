---
import "../../styles/article.css";

import ImageGlow from "../../components/ImageGlow.astro";
import Card from "../../components/Card.astro";
import Layout from "../../layouts/Layout.astro";

import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import { getCollection } from "astro:content";
import { giscus } from "spectre:globals";

/**
 * Estimates the time it takes to read a post in minutes based on:
 * - A reading speed of 200 words per minute
 * - 10 seconds per image
 * - 20 seconds per code block
 *
 * @param post The post to estimate the reading time for
 */
function timeToRead(post: CollectionEntry<"posts">): number {
  const numWords = (post.body || "")
    .replace(/.*\[(.*?)\].*/gm, "$1")
    .replace(/```.*?```/gms, "")
    .split(/\s+/).length;

  const numImages = post.body?.match(/!\[/g)?.length || 0;
  const numCodeblocks = post.body?.match(/``/g)?.length || 0;

  return (
    Math.ceil(numWords / 200) +
    Math.ceil(numImages / 6) +
    Math.ceil(numCodeblocks / 3)
  );
}

// interface Props {
//   post: CollectionEntry<'posts'>;
// }

// const { post } = Astro.props;

export const getStaticPaths = (async () => {
  const posts = await getCollection(
    "posts",
    (post) => (import.meta.env.PROD ? post.data.draft !== true : true),
  );

  const paths = posts.map((post) => {
    const [lang, page] = post.id.split("/");
    return {
      params: { lang, post: page },
      props: post,
    };
  });
  return paths;
}) satisfies GetStaticPaths;

const lang = getLangFromUrl(Astro.url);
// if (lang === "bn") {
// const loc = "bn-BD"; 
// } else {
//   const loc = "en-GB";
// }
const t = useTranslations(lang);

const post = Astro.props;
const { Content, headings } = await render(post);
const tags = post.data.tags.map((tag) => tag.id);
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={post.data.image}
  article={{
    createdAt: post.data.createdAt,
    updatedAt: post.data.updatedAt,
  }}
>
  <div class="left" slot="left">
    <Card class="tags-card">
      <h2 class="no-mt">{t("article.topics")}</h2>
      <ul class="tags-list">
        {
          Array.from(new Set(tags)).map((tag) => (
            <li>
              <a
                class="blog-tag"
                href={`/${lang}/articles?tags=${tag}`}
                data-tag={tag}
              >
                {tag}
              </a>
            </li>
          ))
        }
      </ul>
    </Card>
      {post.data.toc ?
    <Card class="toc-card">
      <h2 class="no-mt">{t("article.toc")}</h2>
      <ol>
        <li class="toc-li">
          <a href={`#_top`} class="active">{post.data.title}</a>
        </li>
        {
          headings.map((heading, i) => (
            <li class="toc-li" data-depth={heading.depth}>
              <a href={`#${heading.slug}`}>{heading.text}</a>
            </li>
          ))
        }
      </ol>
    </Card>
    : null}
  </div>
  <article slot="right" data-pagefind-body>
    <Card>
      <div class="article-header" id="_top" data-pagefind-ignore>
        {post.data.image ? 
        <ImageGlow
          quality={100}
          class="article-image"
          src={post.data.image}
          alt={post.data.title}
        />
        : null
}
        <div class="header">
          <div>
            <h1 class="no-mt article-h1">{post.data.title}</h1>
          </div>
          <div class="article-info">
            <span
              >{
                post.data.createdAt
                  .toLocaleDateString(`${lang}-BD-u-ca-islamic-civil`)
                  .replace(t("date.replace"), "")
              }</span
            >
            <span>/</span>
            <span
              >{timeToRead(post).toLocaleString(`${lang}-BD`)}
              {
                timeToRead(post) === 1
                  ? t("article.minuteToRead")
                  : t("article.minutesToRead")
              }</span
            >
            <!-- <span>/</span> -->
            <!-- <span>{t("article.topics")}: {post.data.tags.map((tag) => tag.id).join(", ")}</span> -->
          </div>
        </div>
      </div>
      <Content />
      {post.data.affiliate ?
<script>
      const aff = document.getElementById("aff_link");
      aff.addEventListener("click", () => {sa_event("aff_link")});
</script>
  : null
      }
      <hr class="end-of-article" />
      <a href=`/${lang}/articles` class="block-link" data-pagefind-ignore
        >‚Üê {t("article.back")}</a
      >
    </Card>
    {post.data.affiliate ?
    <Card class="aff_card">
        <i>{t("article.affiliate")}</i>
    </Card>
    : null
    }
    <!-- { -->
    <!--   giscus && ( -->
    <!--     <Card> -->
    <!--       <div class="comments" data-pagefind-ignore> -->
    <!--         <script -->
    <!--           is:inline -->
    <!--           src="https://giscus.app/client.js" -->
    <!--           data-repo={giscus.repository} -->
    <!--           data-repo-id={giscus.repositoryId} -->
    <!--           data-category={giscus.category} -->
    <!--           data-category-id={giscus.categoryId} -->
    <!--           data-mapping={giscus.mapping} -->
    <!--           data-strict={giscus.strict === true ? "1" : "0"} -->
    <!--           data-reactions-enabled={ -->
    <!--             giscus.reactionsEnabled === true ? "1" : "0" -->
    <!--           } -->
    <!--           data-emit-metadata={giscus.emitMetadata === true ? "1" : "0"} -->
    <!--           data-input-position={giscus.commentsInput} -->
    <!--           data-theme={ -->
    <!--             giscus.theme || "https://spectre.louisescher.dev/styles/giscus" -->
    <!--           } -->
    <!--           data-lang={giscus.lang} -->
    <!--           data-loading="lazy" -->
    <!--           crossorigin="anonymous" -->
    <!--           async -->
    <!--         /> -->
    <!--       </div> -->
    <!--     </Card> -->
    <!--   ) -->
    <!-- } -->
    <Card class="reactions-card">
<div>

        <p id="feedback_title">{t("feedback.title")}</p>

<button class="reaction-btn good">üëç</button>

<button class="reaction-btn bad">üëé</button>

<button class="reaction-btn love">‚ù§Ô∏è</button>
<button class="reaction-btn excellent">‚ö°Ô∏è</button>

        <p id="feedback_message" data-success={t("feedback.success")} data-error={t("feedback.error")}></p>

</div>
<script>

const btn = document.getElementsByClassName("reaction-btn");
const titleElement = document.getElementById("feedback_title");
const messageElement = document.getElementById("feedback_message");

Array.from(btn).forEach((button) => {
  button.addEventListener("click", () => {
    remove();
    feedback(button.classList[1]);
  });
});

function remove() {
  titleElement.remove();
Array.from(btn).forEach((button) => {
    button.remove();
  });
}


function feedback(reaction) {
  try {
    sa_event("feedback_" + reaction);
s_msg();
  } catch (error) {
    e_msg();
  } 
}

         function s_msg() {

                document.getElementById("feedback_message").innerHTML = messageElement.dataset.success;

         }

        function e_msg() {
          document.getElementById("feedback_message").innerHTML = messageElement.dataset.error;
        }

</script>
    </Card>
      {
        lang === "bn" ? (
    <Card class="comments-card-bn">
      <div class="comments" style="display: flex; justify-content: center;" data-pagefind-ignore>
            <script
              async
              src="https://telegram.org/js/telegram-widget.js?22"
              data-telegram-discussion={`khalidershell/${post.data.telegram}`}
              data-comments-limit="5"
              data-color="4285f4"
              data-dark="1"
            />
          </div>
    </Card>
        ) : (
    <Card class="comments-card-en">
          <div class="comments" data-pagefind-ignore>
            <script
              async
              src="https://comments.app/js/widget.js?3"post]
              data-comments-app-website="MLPUiwoX"
              data-limit="5"
              data-color="4285F4"
              data-outlined="1"
              data-dark="1"
            />
          </div>
    </Card>
        )
      }
  </article>
</Layout>

{lang == "bn" ? <script src="../../scripts/toc-bn.ts"></script>
            :
            <script src="../../scripts/toc-en.ts"></script>}
<!-- <style scoped> -->
<!--   .tgme_widget_message_bubble_logo { -->
<!--     display: none; -->
<!--   } -->
<!-- </style> -->
<style is:global>
  .header {
    opacity: 0.8;
  }


.tags-card {
  /* position: sticky; */
  /* top: 2rem; */
  /* min-width: 0; */
  margin-bottom: 1rem;
}


  .toc-card ol {
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 0;
    list-style-type: none;
    position: relative;
  }

  .toc-card ol li a {
    color: #c7c7c7;
    font-size: 0.925rem;
    padding: 0.25rem 0.5rem;
    box-decoration-break: clone;
    -webkit-box-decoration-break: clone;
  }

  .toc-card ol li a:hover {
    color: white;
    text-decoration: none;
  }

  .toc-card ol li a.active {
    color: white;
    background: var(--primary);
  }

  .left {
    height: 100%;
    position: relative;
  }

  .toc-card {
    position: sticky;
    top: 2rem;
  }

  article {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .reactions-card {
    text-align: center;
  }

  .comments * {
    border-color: #353535 !important;
  }

  @media screen and (max-width: 640px) {
    article {
      gap: 1rem;
    }
    .toc-card {
      position: static;
    }
    }
  }
</style>
